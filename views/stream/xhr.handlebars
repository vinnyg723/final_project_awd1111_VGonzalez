<main class="container pt-5">
  <h1>
    XHR API - Data Streaming Example
  </h1>
  <p>
    Data will be loading in below as it is received.
  </p>
  <div class="d-flex align-items-center">
    <span id="stream-data-spinner" class="spinner-border m-2"></span>
    <span id="stream-data-seen" class="m-2" style="font-weight: 900;">
      Loading...
    </span>
  </div>
  <div
    id="stream-data"
    style="font-family: monospace; white-space:normal;"
  ></div>
</main>

<script>
  // Written in pure JavaScript using the XHR API
  // See: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
  // See: https://hpbn.co/xmlhttprequest/

  window.onload = () => {
    setTimeout(streamData, 1000);
  }

  const streamData = () => {
    const outputSpinner = document.getElementById('stream-data-spinner');
    const outputSeen = document.getElementById('stream-data-seen');
    const output = document.getElementById('stream-data');
    let seen = 0;
    
    const xhr = new XMLHttpRequest();
    xhr.open('GET', '/api/stream');
    xhr.responseType = 'text';
    
    xhr.onreadystatechange = (evt) => {
      if (xhr.readyState > 2) {

        // show the new data
        const newData = xhr.responseText.substr(seen);
        const newElement = document.createElement('div');
        newElement.className = 'border mb-3';
        newElement.appendChild(document.createTextNode(newData));
        output.appendChild(newElement);

        // update the number of characters we have seen sofar
        seen = xhr.responseText.length;
        outputSeen.textContent = `${seen.toFixed(0)} characters seen`;
      }
    };
    xhr.onload = (evt) => {
      // hide the spinner
      outputSpinner.classList.add('d-none');
    };
    xhr.onerror = (evt) => {
      // show the error
      outputSeen.textContent = 'ERROR: network error';
      outputSeen.classList.add('text-danger');
      outputSpinner.classList.add('text-danger');
    };

    xhr.send();
  }
</script>