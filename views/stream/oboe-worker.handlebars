<main class="container mt-5">
  <h1>
    Oboe.js - Data Streaming Example
  </h1>
  <p>
    Data will be loading in below as it is received.
  </p>
  <div class="d-flex align-items-center">
    <span id="stream-data-spinner" class="spinner-border m-2"></span>
    <span id="stream-data-seen" class="m-2" style="font-weight: 900;">
      Loading...
    </span>
  </div>
  <div id="stream-data" class="d-flex flex-wrap"></div>
</main>

<script>
  // Written using Oboe.js
  // See: http://oboejs.com/

  window.onload = () => {
    setTimeout(streamData, 1000);
  }

  const streamData = () => {
    const outputSpinner = document.getElementById('stream-data-spinner');
    const outputSeen = document.getElementById('stream-data-seen');
    const output = document.getElementById('stream-data');
    let seen = 0;

    const showChunk = (chunk) => {
      for (const item of chunk) {
        const newElement = document.createElement('div');
        newElement.className = 'm-2';
        newElement.appendChild(document.createTextNode(item.num));
        output.appendChild(newElement);
        ++seen;
      }
      outputSeen.textContent = `${seen} items seen`;
    };

    const worker = new Worker('/js/oboe-worker.js');
    worker.onmessage = (evt) => {
      const cmd = evt.data.cmd;
      const chunk = evt.data.chunk;
      if (chunk) {
        showChunk(chunk);
      }
      if (cmd == 'done') {
        outputSpinner.classList.add('d-none');
      }
      if (cmd == 'error') {
        outputSeen.textContent = `ERROR: ${evt.data.error}`;
        outputSeen.classList.add('text-danger');
        outputSpinner.classList.add('text-danger');
      }
    };
    worker.postMessage({ cmd: 'start', url: '/api/stream' });
  }
</script>